---
/**
 * Enhanced Store Layout with modern UI
 */
export interface Props {
  title?: string;
  description?: string;
}
const {
  title = "Ventio â€” Cyprus Marketplace",
  description = "A new and improved way to find the right buyers and sell in Cyprus.",
} = Astro.props;

import Header from "../components/Header.astro";
import CartBadge from "../components/CartBadge.astro";
import "../styles/tailwind.css";


const origin = Astro.site?.origin ?? "";
const url = origin + Astro.url.pathname;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={url} />
    <meta name="twitter:card" content="summary_large_image" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
      :root {
        --primary: #6366f1;
        --primary-dark: #4f46e5;
        --secondary: #f59e0b;
        --accent: #06b6d4;
        --dark: #0f172a;
        --gray-50: #f8fafc;
        --gray-100: #f1f5f9;
        --gray-200: #e2e8f0;
        --gray-300: #cbd5e1;
        --gray-400: #94a3b8;
        --gray-500: #64748b;
        --gray-600: #475569;
        --gray-700: #334155;
        --gray-800: #1e293b;
        --gray-900: #0f172a;
        --white: #ffffff;
        --success: #10b981;
        --warning: #f59e0b;
        --error: #ef4444;
        --container: 1200px;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        line-height: 1.6;
        color: var(--gray-800);
        background: linear-gradient(135deg, var(--gray-50) 0%, var(--white) 100%);
        overflow-x: hidden;
      }

      .container {
        max-width: var(--container);
        margin: 0 auto;
        padding: 0 1.5rem;
      }

      main {
        min-height: calc(100vh - 70px);
        padding-top: 70px;
        padding-bottom: 2rem;
      }

      /* Loading States */
      .loading {
        position: relative;
        opacity: 0.7;
        pointer-events: none;
      }

      .loading::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        border: 2px solid var(--gray-300);
        border-top-color: var(--primary);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        z-index: 10;
      }

      @keyframes spin {
        to { transform: translate(-50%, -50%) rotate(360deg); }
      }

      /* Success/Error States */
      .success {
        background: var(--success) !important;
        color: white !important;
      }

      .error {
        background: var(--error) !important;
        color: white !important;
      }

      /* Notification System */
      .notification {
        position: fixed;
        top: 100px;
        right: 20px;
        padding: 1rem 1.5rem;
        border-radius: 10px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
        z-index: 9999;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        font-weight: 500;
        max-width: 300px;
      }

      .notification.success {
        background: var(--success);
        color: white;
      }

      .notification.error {
        background: var(--error);
        color: white;
      }

      .notification.show {
        transform: translateX(0);
      }

      /* Animations */
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.8; }
      }

      .animate-fade-in {
        animation: fadeInUp 0.6s ease-out forwards;
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .container {
          padding: 0 1rem;
        }
        
        main {
          padding-top: 70px;
        }
      }

      /* Utility Classes */
      .text-center { text-align: center; }
      .text-left { text-align: left; }
      .text-right { text-align: right; }
      .font-bold { font-weight: 700; }
      .font-semibold { font-weight: 600; }
      .text-primary { color: var(--primary); }
      .text-gray-600 { color: var(--gray-600); }
      .text-gray-500 { color: var(--gray-500); }
      .mb-1 { margin-bottom: 0.25rem; }
      .mb-2 { margin-bottom: 0.5rem; }
      .mb-3 { margin-bottom: 0.75rem; }
      .mb-4 { margin-bottom: 1rem; }
      .mt-1 { margin-top: 0.25rem; }
      .mt-2 { margin-top: 0.5rem; }
      .mt-3 { margin-top: 0.75rem; }
      .mt-4 { margin-top: 1rem; }
      .p-2 { padding: 0.5rem; }
      .p-3 { padding: 0.75rem; }
      .p-4 { padding: 1rem; }
      .rounded { border-radius: 0.5rem; }
      .rounded-lg { border-radius: 0.75rem; }
      .shadow { box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
      .shadow-lg { box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15); }
    </style>
  </head>
  <body>
    <Header />
    <main class="container">
      <slot />
    </main>
    <CartBadge />
    
    <script>
      // Global notification system
      window.showNotification = function(message, type = 'success') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Show notification
        setTimeout(() => {
          notification.classList.add('show');
        }, 100);
        
        // Hide and remove notification
        setTimeout(() => {
          notification.classList.remove('show');
          setTimeout(() => {
            if (notification.parentNode) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 3000);
      };

      // Global loading state management
      window.setLoading = function(element, isLoading) {
        if (isLoading) {
          element.classList.add('loading');
          element.disabled = true;
        } else {
          element.classList.remove('loading');
          element.disabled = false;
        }
      };

      // Initialize animations on page load
      document.addEventListener('DOMContentLoaded', () => {
        // Animate elements on scroll
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('animate-fade-in');
            }
          });
        }, { threshold: 0.1 });

        // Observe all animatable elements
        document.querySelectorAll('[data-animate]').forEach(el => {
          observer.observe(el);
        });
      });
    </script>
  </body>
</html>
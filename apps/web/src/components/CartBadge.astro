---
/**
 * Cart badge component that shows live cart count and provides cart access
 */
---

<style>
  .cart-badge {
    position: fixed;
    top: 50%;
    right: 20px;
    transform: translateY(-50%);
    z-index: 1000;
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    border-radius: 50px;
    padding: 1rem;
    box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
    transition: all 0.3s ease;
    cursor: pointer;
    border: none;
    color: white;
    min-width: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    text-decoration: none;
  }

  .cart-badge:hover {
    transform: translateY(-50%) scale(1.05);
    box-shadow: 0 12px 35px rgba(99, 102, 241, 0.5);
  }

  .cart-badge.loading {
    opacity: 0.7;
    animation: pulse 1.5s infinite;
  }

  .cart-count {
    background: rgba(255, 255, 255, 0.9);
    color: var(--primary);
    font-size: 0.75rem;
    font-weight: 700;
    padding: 0.25rem 0.5rem;
    border-radius: 20px;
    min-width: 20px;
    text-align: center;
    transition: all 0.3s ease;
  }

  .cart-count.updated {
    animation: bounce 0.6s ease;
  }

  .cart-empty {
    opacity: 0.6;
  }

  @keyframes pulse {
    0%, 100% { opacity: 0.7; }
    50% { opacity: 1; }
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-5px); }
    60% { transform: translateY(-3px); }
  }

  /* Hide on mobile to avoid interference with touch scrolling */
  @media (max-width: 768px) {
    .cart-badge {
      top: auto;
      bottom: 20px;
      right: 20px;
      transform: none;
      padding: 0.75rem;
    }

    .cart-badge:hover {
      transform: scale(1.05);
    }
  }
</style>

<a href="/cart" class="cart-badge" id="cart-badge" title="View Cart">
  <span>ðŸ›’</span>
  <span class="cart-count" id="cart-count">0</span>
</a>

<script>
  class CartBadge {
    constructor() {
      this.badge = document.getElementById('cart-badge');
      this.countElement = document.getElementById('cart-count');
      this.currentCount = 0;
      
      this.init();
    }

    async init() {
      await this.updateCount();
      this.setupGlobalTrigger();
      
      // Update count periodically (in case of changes in other tabs)
      setInterval(() => this.updateCount(), 30000);
    }

    async updateCount() {
      try {
        this.badge?.classList.add('loading');
        
        const response = await fetch('/api/cart/count', {
          credentials: 'include',
          cache: 'no-cache'
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const { count } = await response.json();
        this.setCount(count || 0);
        
      } catch (error) {
        console.error('Failed to update cart count:', error);
        // Don't show error to user for cart count failures
      } finally {
        this.badge?.classList.remove('loading');
      }
    }

    setCount(newCount) {
      const count = Math.max(0, parseInt(newCount) || 0);
      
      if (count !== this.currentCount) {
        this.currentCount = count;
        
        if (this.countElement) {
          this.countElement.textContent = count.toString();
          this.countElement.classList.add('updated');
          
          // Remove animation class after animation completes
          setTimeout(() => {
            this.countElement.classList.remove('updated');
          }, 600);
        }
        
        // Update badge appearance
        if (count === 0) {
          this.badge?.classList.add('cart-empty');
          this.badge?.setAttribute('title', 'Cart is empty');
        } else {
          this.badge?.classList.remove('cart-empty');
          this.badge?.setAttribute('title', `View Cart (${count} item${count !== 1 ? 's' : ''})`);
        }
      }
    }

    setupGlobalTrigger() {
      // Set up global function for other components to trigger cart updates
      window.triggerCartUpdate = () => {
        this.updateCount();
      };
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new CartBadge();
  });

  // Also initialize immediately if DOM is already loaded
  if (document.readyState === 'loading') {
    // DOM is still loading, wait for DOMContentLoaded
  } else {
    // DOM is already loaded
    new CartBadge();
  }
</script>
---
/**
 * ProductCard — shows a product and provides a robust "Add to cart" button.
 * Expects product to include variants[0].id so we can add from the grid.
 */
export interface Props { product: any }
const { product } = Astro.props

const img = product?.featuredAsset?.preview ?? ""
const variant = Array.isArray(product?.variants) && product.variants.length > 0 ? product.variants[0] : null
const variantId: string | null = variant?.id ?? null
const priceWithTax = variant?.priceWithTax ?? null
const currencyCode = variant?.currencyCode ?? ""
---

<style>
  .card {
    border: 1px solid #eee; border-radius: 12px; overflow: hidden;
    display: grid; grid-template-rows: 180px 1fr auto; background: white;
  }
  .img { background:#fafafa; display:flex; align-items:center; justify-content:center; }
  .img > img { max-width:100%; max-height:100%; object-fit:contain; }
  .body { padding:.75rem .9rem; }
  .title { font-weight:600; margin:0 0 .25rem 0; }
  .muted { color:#666; font-size:.92rem; }
  .actions { display:flex; gap:.5rem; padding:.75rem .9rem; }
  .btn {
    display:inline-block; padding:.55rem .9rem; border-radius:10px; border:1px solid #e5e5e5;
    text-decoration:none; color:inherit; background:#fafafa; cursor:pointer;
  }
  .btn:hover { background:#f2f2f2; }
  .btn.primary { background:black; color:white; border-color:black; }
  .btn[disabled] { opacity:.5; cursor:not-allowed; }
</style>

<article class="card">
  <div class="img">
    {img ? <img src={img} alt={product?.name} loading="lazy" /> : <span class="muted">No image</span>}
  </div>
  <div class="body">
    <h3 class="title">{product?.name}</h3>
    {priceWithTax !== null ? (
      <div class="muted">{(priceWithTax/100).toFixed(2)} {currencyCode}</div>
    ) : (
      <div class="muted">View details</div>
    )}
  </div>
  <div class="actions">
    <a class="btn" href={`/p/${product?.slug}`}>View</a>
    <button
      class="btn primary add-to-cart"
      type="button"
      disabled={!variantId}
      data-variant-id={variantId ?? ''}
      aria-disabled={!variantId}
      title={variantId ? 'Add to cart' : 'No purchasable variant'}
    >
      Add to cart
    </button>
  </div>
</article>

<script type="module">
  // Attach a click handler for this card only
  const root = document.currentScript?.closest('article');
  const btn = root?.querySelector('.add-to-cart');
  if (btn) {
    btn.addEventListener('click', async () => {
      const id = btn.getAttribute('data-variant-id');
      if (!id) return;
      btn.setAttribute('disabled', 'true');
      const original = btn.textContent;
      btn.textContent = 'Adding...';
      try {
        const res = await fetch('/api/cart/add', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          body: JSON.stringify({ variantId: id, quantity: 1 }),
          credentials: 'include',
        });
        const json = await res.json().catch(() => ({}));
        if (!res.ok || json?.errorCode || json?.message) {
          btn.textContent = 'Failed. Try again';
          setTimeout(() => { btn.textContent = original; btn.removeAttribute('disabled'); }, 1200);
          return;
        }
        btn.textContent = 'Added ✓';
        setTimeout(() => { btn.textContent = original; btn.removeAttribute('disabled'); }, 800);
        // Optional: ping the cart count endpoint so the badge updates immediately
        try { await fetch('/api/cart/count', { credentials: 'include' }); } catch {}
      } catch {
        btn.textContent = 'Network error';
        setTimeout(() => { btn.textContent = original; btn.removeAttribute('disabled'); }, 1200);
      }
    });
  }
</script>

---
/**
 * Enhanced ProductCard with modern UI and full API integration
 */
export interface Props { 
  product: any;
  index?: number;
}

const { product, index = 0 } = Astro.props;

const img = product?.featuredAsset?.preview ?? "";
const variant = Array.isArray(product?.variants) && product.variants.length > 0 ? product.variants[0] : null;
const variantId: string | null = variant?.id ?? null;
const priceWithTax = variant?.priceWithTax ?? null;
const currencyCode = variant?.currencyCode ?? "EUR";
const productName = product?.name ?? "Unnamed Product";
const productSlug = product?.slug ?? "";
---

<style>
  .product-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    position: relative;
    display: grid;
    grid-template-rows: 250px 1fr auto;
    height: 100%;
    opacity: 0;
    transform: translateY(30px);
  }

  .product-card.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .product-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
  }

  .product-image {
    position: relative;
    background: linear-gradient(135deg, var(--gray-100) 0%, var(--gray-50) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .product-card:hover .product-image img {
    transform: scale(1.1);
  }

  .product-image::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.3) 50%, transparent 70%);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .product-card:hover .product-image::before {
    transform: translateX(100%);
  }

  .product-placeholder {
    font-size: 3.5rem;
    color: var(--gray-400);
    filter: grayscale(1);
    transition: all 0.3s ease;
  }

  .product-card:hover .product-placeholder {
    filter: grayscale(0);
    transform: scale(1.1);
  }

  .product-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    flex-grow: 1;
  }

  .product-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--gray-900);
    margin: 0;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .product-price {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary);
    margin: 0;
  }

  .product-currency {
    font-size: 1rem;
    font-weight: 500;
    color: var(--gray-600);
  }

  .product-description {
    color: var(--gray-600);
    font-size: 0.9rem;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin: 0;
  }

  .product-actions {
    padding: 1.5rem;
    border-top: 1px solid var(--gray-100);
    display: flex;
    gap: 0.75rem;
  }

  .btn {
    padding: 0.75rem 1rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    cursor: pointer;
    border: none;
    font-size: 0.95rem;
    position: relative;
    overflow: hidden;
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    color: white;
    flex: 1;
  }

  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
  }

  .btn-secondary {
    background: var(--gray-100);
    color: var(--gray-700);
    padding: 0.75rem;
    min-width: 44px;
  }

  .btn-secondary:hover {
    background: var(--gray-200);
    transform: translateY(-1px);
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  .btn.loading {
    opacity: 0.8;
    pointer-events: none;
  }

  .btn.loading::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top-color: white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .btn.success {
    background: var(--success) !important;
    color: white !important;
  }

  .btn.error {
    background: var(--error) !important;
    color: white !important;
  }

  .product-badge {
    position: absolute;
    top: 1rem;
    left: 1rem;
    background: var(--secondary);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 600;
    z-index: 2;
  }

  .out-of-stock {
    position: relative;
  }

  .out-of-stock::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(2px);
    border-radius: 20px;
  }

  .stock-overlay {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--error);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    font-weight: 600;
    font-size: 0.9rem;
    z-index: 3;
  }

  /* Animation delays for staggered entrance */
  .product-card[data-index="0"] { animation-delay: 0s; }
  .product-card[data-index="1"] { animation-delay: 0.1s; }
  .product-card[data-index="2"] { animation-delay: 0.2s; }
  .product-card[data-index="3"] { animation-delay: 0.3s; }
  .product-card[data-index="4"] { animation-delay: 0.4s; }
  .product-card[data-index="5"] { animation-delay: 0.5s; }

  @media (max-width: 768px) {
    .product-content {
      padding: 1rem;
    }
    
    .product-actions {
      padding: 1rem;
      flex-direction: column;
    }
    
    .btn-secondary {
      display: none;
    }
  }
</style>

<article 
  class={`product-card ${!variantId ? 'out-of-stock' : ''}`} 
  data-index={index}
  data-animate
>
  {!variantId && (
    <div class="stock-overlay">Out of Stock</div>
  )}
  
  <div class="product-image">
    {img ? (
      <img src={img} alt={productName} loading="lazy" />
    ) : (
      <div class="product-placeholder">üì¶</div>
    )}
    
    {priceWithTax && priceWithTax > 0 && (
      <div class="product-badge">
        {currencyCode}
      </div>
    )}
  </div>

  <div class="product-content">
    <h3 class="product-title">{productName}</h3>
    
    {priceWithTax !== null ? (
      <div class="product-price">
        ‚Ç¨{(priceWithTax / 100).toFixed(2)}
        <span class="product-currency">{currencyCode}</span>
      </div>
    ) : (
      <div class="product-price" style="color: var(--gray-500);">
        Price on request
      </div>
    )}

    {product?.description && (
      <p class="product-description">{product.description}</p>
    )}
  </div>

  <div class="product-actions">
    <button
      class="btn btn-primary add-to-cart-btn"
      type="button"
      disabled={!variantId}
      data-variant-id={variantId ?? ''}
      data-product-name={productName}
      title={variantId ? 'Add to cart' : 'Not available'}
    >
      {variantId ? 'üõí Add to Cart' : 'Unavailable'}
    </button>
    
    {productSlug && (
      <a 
        class="btn btn-secondary" 
        href={`/p/${productSlug}`} 
        title="View product details"
      >
        üëÅÔ∏è
      </a>
    )}
  </div>
</article>

<script type="module">
  class ProductCard {
    constructor(element) {
      this.card = element;
      this.button = this.card.querySelector('.add-to-cart-btn');
      this.setupEventListeners();
      this.animateIn();
    }

    setupEventListeners() {
      if (this.button) {
        this.button.addEventListener('click', (e) => this.handleAddToCart(e));
      }
    }

    animateIn() {
      // Use intersection observer for better performance
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            setTimeout(() => {
              this.card.classList.add('animate');
            }, parseInt(this.card.dataset.index || 0) * 100);
            observer.unobserve(this.card);
          }
        });
      }, { threshold: 0.1 });

      observer.observe(this.card);
    }

    async handleAddToCart(event) {
      event.preventDefault();
      
      const variantId = this.button.dataset.variantId;
      const productName = this.button.dataset.productName;
      
      if (!variantId) {
        window.showNotification?.('This product is not available', 'error');
        return;
      }

      const originalText = this.button.textContent;
      
      try {
        // Set loading state
        this.button.classList.add('loading');
        this.button.disabled = true;
        this.button.textContent = 'Adding...';

        const response = await fetch('/api/cart/add', {
          method: 'POST',
          headers: { 
            'content-type': 'application/json',
            'cache-control': 'no-cache'
          },
          body: JSON.stringify({ 
            variantId, 
            quantity: 1 
          }),
          credentials: 'include',
        });

        const result = await response.json();

        if (!response.ok || result?.errorCode || result?.message) {
          throw new Error(result?.message || `Server error: ${response.status}`);
        }

        // Success state
        this.button.classList.remove('loading');
        this.button.classList.add('success');
        this.button.textContent = 'Added ‚úì';

        // Show success notification
        window.showNotification?.(`${productName} added to cart!`, 'success');

        // Trigger cart update
        window.triggerCartUpdate?.();

        // Reset button after delay
        setTimeout(() => {
          this.button.classList.remove('success');
          this.button.textContent = originalText;
          this.button.disabled = false;
        }, 2000);

      } catch (error) {
        console.error('Add to cart error:', error);
        
        // Error state
        this.button.classList.remove('loading');
        this.button.classList.add('error');
        this.button.textContent = 'Failed';

        // Show error notification
        window.showNotification?.(`Failed to add ${productName} to cart. Please try again.`, 'error');

        // Reset button after delay
        setTimeout(() => {
          this.button.classList.remove('error');
          this.button.textContent = originalText;
          this.button.disabled = false;
        }, 2500);
      }
    }
  }

  // Initialize product card when the script runs
  const currentCard = document.currentScript?.closest('.product-card');
  if (currentCard) {
    new ProductCard(currentCard);
  }
</script>
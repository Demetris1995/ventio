---
/**
 * Modern hero section with enhanced visuals and animations
 */
---

<style>
  .hero {
    padding: 2rem 0 4rem;
    background: linear-gradient(135deg, var(--gray-50) 0%, var(--white) 50%, var(--gray-50) 100%);
    position: relative;
    overflow: hidden;
    min-height: 80vh;
    display: flex;
    align-items: center;
  }

  .hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 20% 80%, rgba(99, 102, 241, 0.1) 0%, transparent 50%),
      radial-gradient(circle at 80% 20%, rgba(6, 182, 212, 0.1) 0%, transparent 50%);
    pointer-events: none;
  }

  .hero-container {
    position: relative;
    z-index: 1;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    max-width: var(--container);
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .hero-content {
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 1s ease 0.2s forwards;
  }

  .hero-title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    font-weight: 800;
    line-height: 1.2;
    margin-bottom: 1.5rem;
    background: linear-gradient(135deg, var(--gray-900) 0%, var(--gray-700) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .hero-subtitle {
    font-size: 1.25rem;
    color: var(--gray-600);
    margin-bottom: 2.5rem;
    line-height: 1.7;
    max-width: 90%;
  }

  .hero-ctas {
    display: flex;
    gap: 1rem;
    margin-bottom: 3rem;
    flex-wrap: wrap;
  }

  .hero-btn {
    padding: 1rem 2rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    border: none;
    font-size: 1rem;
    position: relative;
    overflow: hidden;
  }

  .hero-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .hero-btn:hover::before {
    left: 100%;
  }

  .btn-primary {
    background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(99, 102, 241, 0.3);
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(99, 102, 241, 0.4);
  }

  .btn-secondary {
    background: white;
    color: var(--gray-700);
    border: 2px solid var(--gray-200);
  }

  .btn-secondary:hover {
    background: var(--gray-50);
    border-color: var(--primary);
    color: var(--primary);
    transform: translateY(-1px);
  }

  .hero-stats {
    display: flex;
    gap: 2.5rem;
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 1s ease 0.6s forwards;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    font-size: 2.25rem;
    font-weight: 700;
    color: var(--primary);
    display: block;
    line-height: 1.1;
  }

  .stat-label {
    color: var(--gray-600);
    font-size: 0.9rem;
    font-weight: 500;
    margin-top: 0.25rem;
  }

  .hero-visual {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    opacity: 0;
    transform: translateX(30px);
    animation: fadeInRight 1s ease 0.4s forwards;
  }

  .hero-image {
    width: 100%;
    max-width: 500px;
    height: 400px;
    background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
    border-radius: 24px;
    position: relative;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    animation: float 6s ease-in-out infinite;
  }

  .hero-image::before {
    content: '';
    position: absolute;
    top: 20px;
    left: 20px;
    right: 20px;
    bottom: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    backdrop-filter: blur(10px);
  }

  .hero-image::after {
    content: 'üõí‚ú®';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 4rem;
    animation: bounce 2s infinite;
  }

  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    overflow: hidden;
  }

  .floating-element {
    position: absolute;
    opacity: 0.6;
    animation: floatRandom 8s ease-in-out infinite;
  }

  .floating-element:nth-child(1) {
    top: 20%;
    left: 10%;
    font-size: 2rem;
    animation-delay: 0s;
  }

  .floating-element:nth-child(2) {
    top: 60%;
    right: 15%;
    font-size: 1.5rem;
    animation-delay: 2s;
  }

  .floating-element:nth-child(3) {
    bottom: 30%;
    left: 5%;
    font-size: 1.8rem;
    animation-delay: 4s;
  }

  .floating-element:nth-child(4) {
    top: 10%;
    right: 5%;
    font-size: 1.3rem;
    animation-delay: 1s;
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes float {
    0%, 100% { 
      transform: translateY(0px) rotate(0deg); 
    }
    50% { 
      transform: translateY(-20px) rotate(2deg); 
    }
  }

  @keyframes bounce {
    0%, 100% { 
      transform: translate(-50%, -50%) scale(1); 
    }
    50% { 
      transform: translate(-50%, -50%) scale(1.1); 
    }
  }

  @keyframes floatRandom {
    0%, 100% { 
      transform: translateY(0px) translateX(0px); 
    }
    25% { 
      transform: translateY(-10px) translateX(5px); 
    }
    50% { 
      transform: translateY(5px) translateX(-3px); 
    }
    75% { 
      transform: translateY(-5px) translateX(8px); 
    }
  }

  @media (max-width: 768px) {
    .hero {
      padding: 1rem 0 2rem;
      min-height: 70vh;
    }

    .hero-container {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }

    .hero-title {
      font-size: clamp(2rem, 8vw, 2.5rem);
    }

    .hero-subtitle {
      font-size: 1.1rem;
      max-width: 100%;
    }

    .hero-ctas {
      justify-content: center;
    }

    .hero-btn {
      padding: 0.875rem 1.5rem;
      font-size: 0.95rem;
    }

    .hero-stats {
      justify-content: center;
      gap: 2rem;
    }

    .stat-number {
      font-size: 1.8rem;
    }

    .hero-image {
      max-width: 350px;
      height: 300px;
    }

    .hero-image::after {
      font-size: 3rem;
    }
  }

  @media (max-width: 480px) {
    .hero-ctas {
      flex-direction: column;
      align-items: center;
    }

    .hero-btn {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }

    .hero-stats {
      gap: 1.5rem;
      flex-wrap: wrap;
    }
  }
</style>

<section class="hero" id="hero">
  <div class="floating-elements">
    <div class="floating-element">üè∫</div>
    <div class="floating-element">ü´í</div>
    <div class="floating-element">üé®</div>
    <div class="floating-element">üì±</div>
  </div>

  <div class="hero-container">
    <div class="hero-content">
      <h1 class="hero-title">Discover Cyprus's Premier Marketplace</h1>
      <p class="hero-subtitle">
        Connect with local buyers and sellers in a modern, secure platform. From handcrafted pottery to premium olive oil, find authentic Cypriot products that tell a story.
      </p>
      
      <div class="hero-ctas">
        <a href="#products" class="hero-btn btn-primary">
          üõçÔ∏è Shop Now
        </a>
        <a href="/cart" class="hero-btn btn-secondary">
          üõí View Cart
        </a>
      </div>

      <div class="hero-stats">
        <div class="stat">
          <span class="stat-number" data-target="1000">0</span>
          <span class="stat-label">Products</span>
        </div>
        <div class="stat">
          <span class="stat-number" data-target="500">0</span>
          <span class="stat-label">Sellers</span>
        </div>
        <div class="stat">
          <span class="stat-number" data-target="5000">0</span>
          <span class="stat-label">Happy Customers</span>
        </div>
      </div>
    </div>
    
    <div class="hero-visual">
      <div class="hero-image"></div>
    </div>
  </div>
</section>

<script>
  // Animate statistics counter
  function animateStats() {
    const statNumbers = document.querySelectorAll('.stat-number[data-target]');
    
    const animateNumber = (element) => {
      const target = parseInt(element.dataset.target);
      const duration = 2000; // 2 seconds
      const increment = target / (duration / 16); // 60 FPS
      let current = 0;
      
      const timer = setInterval(() => {
        current += increment;
        
        if (current >= target) {
          current = target;
          clearInterval(timer);
        }
        
        // Format number with appropriate suffix
        if (target >= 1000) {
          element.textContent = Math.floor(current / 1000) + 'K+';
        } else {
          element.textContent = Math.floor(current) + '+';
        }
      }, 16);
    };

    // Use Intersection Observer to trigger animation when hero is visible
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Delay the animation slightly after hero content appears
          setTimeout(() => {
            statNumbers.forEach(animateNumber);
          }, 800);
          
          observer.disconnect();
        }
      });
    }, { threshold: 0.5 });

    const heroSection = document.getElementById('hero');
    if (heroSection) {
      observer.observe(heroSection);
    }
  }

  // Smooth scroll for CTA buttons
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          const headerHeight = 70;
          const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - headerHeight;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  }

  // Parallax effect for hero image
  function setupParallax() {
    const heroImage = document.querySelector('.hero-image');
    if (!heroImage) return;

    let ticking = false;
    
    function updateParallax() {
      const scrolled = window.pageYOffset;
      const parallax = scrolled * 0.1;
      
      heroImage.style.transform = `translateY(${parallax}px)`;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    });
  }

  // Initialize everything when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    animateStats();
    setupSmoothScroll();
    setupParallax();
  });
</script>
---
export const prerender = false;

import { ApolloClient, InMemoryCache, gql, HttpLink } from "@apollo/client/core";
import StoreLayout from "../../layouts/StoreLayout.astro";

// Route param
const slug = Astro.params.slug ?? "";

// Forward the browser session cookie to Vendure during SSR
const cookieHeader = Astro.request.headers.get('cookie') ?? '';

const client = new ApolloClient({
  link: new HttpLink({
    uri: import.meta.env.PUBLIC_SHOP_API_URL,
    fetch: (uri, options) => {
      const headers = new Headers(options?.headers || {});
      if (cookieHeader) headers.set('cookie', cookieHeader);
      return fetch(uri, { ...options, headers });
    },
  }),
  cache: new InMemoryCache(),
});

const { data } = await client.query({
  query: gql`
    query ProductBySlug($slug: String!) {
      product(slug: $slug) {
        id
        name
        slug
        description
        featuredAsset { preview }
        assets { preview }
        optionGroups {
          id
          code
          name
          options {
            id
            code
            name
          }
        }
        variants {
          id
          name
          sku
          priceWithTax
          currencyCode
          stockLevel
          featuredAsset { preview }
          options { code name }
        }
      }
    }
  `,
  variables: { slug },
  fetchPolicy: "no-cache",
});

const product = data?.product ?? null;

// 404 if not found
if (!product) {
  Astro.response.status = 404;
}
---

<StoreLayout title={product ? `${product.name} ‚Äî Ventio` : 'Product not found ‚Äî Ventio'}>
  {!product ? (
    <div class="not-found">
      <div class="icon">üîé</div>
      <h1>Product not found</h1>
      <p>This product may have been removed or never existed.</p>
      <a href="/" class="btn btn-primary">‚Üê Back to home</a>
    </div>
  ) : (
    <div class="product-page">
      <!-- Breadcrumbs -->
      <nav class="breadcrumbs">
        <a href="/">Home</a>
        <span>/</span>
        <a href="/#products">Products</a>
        <span>/</span>
        <span aria-current="page">{product.name}</span>
      </nav>

      <div class="grid">
        <!-- Gallery -->
        <div class="gallery">
          <div class="main-image">
            {product.featuredAsset?.preview ? (
              <img id="main-img" src={product.featuredAsset.preview} alt={product.name} loading="eager" />
            ) : (
              <div class="placeholder">üñºÔ∏è</div>
            )}
          </div>
          {product.assets?.length > 1 && (
            <div class="thumbs">
              {product.assets.map((a, i) => (
                <button class="thumb" data-src={a.preview} aria-label={`Image ${i+1}`}>
                  <img src={a.preview} alt={`${product.name} ${i+1}`} loading="lazy" />
                </button>
              ))}
            </div>
          )}
        </div>

        <!-- Details -->
        <div class="details">
          <h1 class="title">{product.name}</h1>

          <!-- Price + stock (initial from first variant) -->
          {product.variants.length > 0 && (
            <div class="price-stock">
              <div class="price">
                ‚Ç¨{(product.variants[0].priceWithTax / 100).toFixed(2)} {product.variants[0].currencyCode}
              </div>
              <div class="stock" data-stock={product.variants[0].stockLevel}>
                {product.variants[0].stockLevel?.replace(/_/g, ' ') ?? 'IN_STOCK'}
              </div>
            </div>
          )}

          <!-- Options -->
          {product.optionGroups?.length > 0 && (
            <div class="options">
              {product.optionGroups.map((group, gi) => (
                <div class="option-group">
                  <div class="og-title">{group.name}</div>
                  <div class="og-values">
                    {group.options.map((opt, oi) => (
                      <label class="og-pill">
                        <input
                          type="radio"
                          name={`og-${gi}`}
                          value={opt.code}
                          data-group-index={gi}
                          { ...(product.variants[0]?.options?.[gi]?.code === opt.code ? { checked: true } : {}) }
                        />
                        <span>{opt.name}</span>
                      </label>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}

          <!-- Quantity -->
          <div class="qty-row">
            <div class="qty">
              <button class="qty-btn" id="qty-dec" aria-label="Decrease">‚àí</button>
              <input id="qty-input" type="number" min="1" max="99" value="1" />
              <button class="qty-btn" id="qty-inc" aria-label="Increase">+</button>
            </div>
          </div>

          <!-- CTA -->
          <div class="cta">
          <button
            id="add-to-cart"
            class="btn btn-primary"
            type="button"
            data-variant-id={product.variants?.[0]?.id}
          >
            üõí Add to cart
          </button>
            <a href="/cart" class="btn btn-secondary">View cart ‚Üí</a>
          </div>

          <!-- Description -->
          {product.description && (
            <div class="desc">
              <h2>Description</h2>
              <p set:html={product.description} />
            </div>
          )}

          <!-- Meta -->
          <div class="meta">
            <div><strong>SKU:</strong> <span id="sku">{product.variants[0]?.sku ?? '‚Äî'}</span></div>
            <div><strong>Code:</strong> {product.slug}</div>
          </div>
        </div>
      </div>

      <!-- Variant data for client script -->
      <script id="variant-data" type="application/json">
        {JSON.stringify(
          product.variants.map((v) => ({
            id: v.id,
            name: v.name,
            sku: v.sku,
            priceWithTax: v.priceWithTax,
            currencyCode: v.currencyCode,
            stockLevel: v.stockLevel,
            image: v.featuredAsset?.preview || product.featuredAsset?.preview || null,
            options: v.options?.map((o) => o.code) || [],
          })),
        )}
      </script>

      <!-- JSON-LD -->
      <script type="application/ld+json">
        {JSON.stringify({
          '@context': 'https://schema.org/',
          '@type': 'Product',
          name: product.name,
          image: (product.assets || []).map(a => a.preview),
          description: product.description,
          sku: product.variants?.[0]?.sku,
          offers: {
            '@type': 'Offer',
            priceCurrency: product.variants?.[0]?.currencyCode,
            price: (product.variants?.[0]?.priceWithTax ?? 0) / 100,
            availability: 'https://schema.org/' + (product.variants?.[0]?.stockLevel || 'InStock'),
            url: `https://example.com/p/${product.slug}`,
          },
        })}
      </script>
    </div>
  )}
</StoreLayout>

<style>
  .not-found {
    max-width: 900px; margin: 0 auto; padding: 4rem 1rem; text-align: center;
    background: white; border-radius: 20px; box-shadow: 0 8px 30px rgba(0,0,0,.08);
  }
  .not-found .icon { font-size: 3rem; margin-bottom: .75rem; }

  .product-page { max-width: 1200px; margin: 0 auto; padding: 1.5rem; }
  .breadcrumbs { display:flex; gap:.5rem; align-items:center; font-size:.9rem; color: var(--gray-500); margin-bottom: 1rem; }
  .breadcrumbs a { color: var(--gray-600); text-decoration:none; }
  .breadcrumbs a:hover { color: var(--primary); }

  .grid { display:grid; grid-template-columns: 1fr 1fr; gap: 2rem; }
  .gallery { background:white; border-radius: 16px; padding: 1rem; box-shadow: 0 4px 20px rgba(0,0,0,.06); }
  .main-image { width:100%; aspect-ratio: 1 / 1; border-radius: 12px; overflow:hidden; background: var(--gray-100);
    display:flex; align-items:center; justify-content:center; }
  .main-image img { width:100%; height:100%; object-fit:contain; }
  .placeholder { font-size:3rem; color: var(--gray-400); }

  .thumbs { margin-top: .75rem; display:flex; gap:.5rem; flex-wrap: wrap; }
  .thumb { padding:0; border:none; background:transparent; width:64px; height:64px; border-radius:8px; overflow:hidden; cursor:pointer;
    outline:1px solid var(--gray-200); }
  .thumb img { width:100%; height:100%; object-fit:cover; }

  .details { padding: 1rem; }
  .title { font-size: 2rem; font-weight: 800; color: var(--gray-900); margin-bottom: .5rem; }
  .price-stock { display:flex; gap:1rem; align-items:center; margin: .25rem 0 1rem; }
  .price { font-size:1.75rem; font-weight:800; color: var(--primary); }
  .stock { font-size:.85rem; padding:.35rem .6rem; border-radius:999px; background: var(--gray-100); color: var(--gray-700); text-transform:capitalize; }
  .stock[data-stock="OUT_OF_STOCK"] { background: rgba(239,68,68,.1); color: var(--error); }
  .stock[data-stock="IN_STOCK"] { background: rgba(16,185,129,.1); color: var(--success); }

  .options { display:flex; flex-direction:column; gap: 1rem; margin: 1rem 0; }
  .og-title { font-size:.95rem; font-weight:600; color: var(--gray-800); margin-bottom:.35rem; }
  .og-values { display:flex; gap:.5rem; flex-wrap: wrap; }
  .og-pill { display:inline-flex; align-items:center; gap:.5rem; }
  .og-pill input { display:none; }
  .og-pill span { display:inline-block; padding:.5rem .75rem; border-radius:999px; background: var(--gray-100); color: var(--gray-700); cursor:pointer; border:1px solid var(--gray-200); }
  .og-pill input:checked + span { background: var(--primary); color: white; border-color: var(--primary); }

  .qty-row { margin: 1rem 0; }
  .qty { display:inline-flex; border:1px solid var(--gray-200); border-radius:10px; overflow:hidden; }
  .qty-btn { width:38px; height:38px; background: var(--gray-50); border:none; cursor:pointer; font-size:1.1rem; }
  .qty-btn:hover { background: var(--gray-100); }
  #qty-input { width:56px; height:38px; text-align:center; border:none; outline:none; }

  .cta { display:flex; gap:.75rem; margin: 1rem 0 1.5rem; }
  .btn { padding: .9rem 1.25rem; border-radius:12px; text-decoration:none; font-weight:700; display:inline-flex; align-items:center; gap:.5rem; cursor:pointer; border:none; }
  .btn-primary { background: linear-gradient(135deg, var(--primary), var(--primary-dark)); color:white; box-shadow:0 6px 20px rgba(99,102,241,.35); }
  .btn-primary:hover { transform: translateY(-1px); box-shadow:0 10px 28px rgba(99,102,241,.45); }
  .btn-secondary { background: var(--gray-100); color: var(--gray-800); }
  .btn-secondary:hover { background: var(--gray-200); }

  .desc { margin-top: 1rem; line-height:1.7; color: var(--gray-700); }
  .desc h2 { font-size:1.25rem; margin: .5rem 0 .5rem; color: var(--gray-900); }
  .meta { margin-top:1rem; display:flex; gap:1rem; color: var(--gray-600); font-size:.9rem; }

  @media (max-width: 900px) {
    .grid { grid-template-columns: 1fr; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const VARIANTS = (() => {
      try {
        const el = document.getElementById('variant-data');
        return JSON.parse(el?.textContent || '[]');
      } catch { return []; }
    })();

    const groups = document.querySelectorAll('.option-group');
    const mainImg = document.getElementById('main-img');
    const priceEl = document.querySelector('.price');
    const stockEl = document.querySelector('.stock');
    const skuEl = document.getElementById('sku');
    const qtyInput = document.getElementById('qty-input');
    const addBtn = document.getElementById('add-to-cart');

    let selectedCodes = (VARIANTS[0]?.options || []).slice();
    let selectedVariantId = VARIANTS[0]?.id || null;

    function applyVariant(v) {
      if (!v) return;
      selectedVariantId = v.id;
      if (priceEl) priceEl.textContent = `‚Ç¨${(v.priceWithTax / 100).toFixed(2)} ${v.currencyCode}`;
      if (stockEl) {
        stockEl.dataset.stock = v.stockLevel || 'IN_STOCK';
        stockEl.textContent = (v.stockLevel || 'IN_STOCK').replace(/_/g, ' ');
      }
      if (skuEl) skuEl.textContent = v.sku || '‚Äî';
      if (v.image && mainImg) mainImg.src = v.image;
      if (addBtn) addBtn.disabled = v.stockLevel === 'OUT_OF_STOCK';
    }

    function findVariantByCodes(codes) {
      return VARIANTS.find(v => (v.options || []).join('|') === codes.join('|')) || null;
    }

    groups.forEach((groupEl, gi) => {
      groupEl.querySelectorAll('input[type="radio"]').forEach((radio) => {
        radio.addEventListener('change', () => {
          const code = radio.value;
          selectedCodes[gi] = code;
          const v = findVariantByCodes(selectedCodes);
          if (v) applyVariant(v);
        });
      });
    });

    document.querySelectorAll('.thumb').forEach((btn) => {
      btn.addEventListener('click', () => {
        const src = btn.getAttribute('data-src');
        if (src && mainImg) mainImg.src = src;
      });
    });

    document.getElementById('qty-dec')?.addEventListener('click', () => {
      const v = Math.max(1, (parseInt(qtyInput.value) || 1) - 1);
      qtyInput.value = v;
    });
    document.getElementById('qty-inc')?.addEventListener('click', () => {
      const v = Math.min(99, (parseInt(qtyInput.value) || 1) + 1);
      qtyInput.value = v;
    });

    async function refreshHeaderCount() {
      try {
        const r = await fetch('/api/cart/count', { credentials: 'include' });
        const j = await r.json();
        const el = document.getElementById('cart-count');
        if (el && typeof j.count === 'number') el.textContent = String(j.count);
      } catch {}
    }

    addBtn?.addEventListener('click', async () => {
      const fallbackId = addBtn.getAttribute('data-variant-id');
      const variantId = selectedVariantId || fallbackId;
      if (!variantId) {
        window.showNotification?.('No variant selected', 'error');
        return;
      }
      const quantity = Math.max(1, parseInt(qtyInput.value) || 1);

      addBtn.disabled = true;
      const orig = addBtn.textContent;
      addBtn.textContent = 'Adding...';

      try {
        const res = await fetch('/api/cart/add', {
          method: 'POST',
          headers: { 'content-type': 'application/json' },
          credentials: 'include',
          body: JSON.stringify({ variantId, quantity }),
        });
        if (!res.ok) throw new Error('Add failed');

        window.showNotification?.('Added to cart ‚úì', 'success');
        await refreshHeaderCount();
        addBtn.textContent = 'Added ‚úì';
        setTimeout(() => { addBtn.textContent = orig; addBtn.disabled = false; }, 900);
      } catch (e) {
        console.error(e);
        window.showNotification?.('Could not add to cart', 'error');
        addBtn.textContent = orig;
        addBtn.disabled = false;
      }
    });

    if (VARIANTS[0]) applyVariant(VARIANTS[0]);
  });
</script>
